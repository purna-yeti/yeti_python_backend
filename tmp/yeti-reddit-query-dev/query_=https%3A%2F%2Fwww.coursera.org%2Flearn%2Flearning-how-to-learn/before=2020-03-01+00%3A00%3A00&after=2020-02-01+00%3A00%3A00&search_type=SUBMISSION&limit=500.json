[{"all_awardings": [], "allow_live_comments": false, "author": "_IllaGORILLA_", "author_flair_css_class": null, "author_flair_richtext": [], "author_flair_text": null, "author_flair_type": "text", "author_fullname": "t2_4fzqit0q", "author_patreon_flair": false, "author_premium": false, "awarders": [], "can_mod_post": false, "contest_mode": false, "created_utc": 1583018511, "domain": "self.learnprogramming", "full_link": "https://www.reddit.com/r/learnprogramming/comments/fbkztc/i_cant_recommend_coursera_and_lynda_enough_ive/", "gildings": {}, "id": "fbkztc", "is_crosspostable": true, "is_meta": false, "is_original_content": false, "is_reddit_media_domain": false, "is_robot_indexable": true, "is_self": true, "is_video": false, "link_flair_background_color": "", "link_flair_richtext": [], "link_flair_text_color": "dark", "link_flair_type": "text", "locked": false, "media_only": false, "no_follow": true, "num_comments": 13, "num_crossposts": 0, "over_18": false, "parent_whitelist_status": "all_ads", "permalink": "/r/learnprogramming/comments/fbkztc/i_cant_recommend_coursera_and_lynda_enough_ive/", "pinned": false, "pwls": 6, "retrieved_on": 1583018512, "score": 1, "selftext": "I've struggled learning software development and a variety of different subjects in IT for years. Recently, I started using [Coursera](https://www.coursera.org/) which I highly recommend, primarily taking the Google courses such as [Bits and Bites of Networking](https://www.coursera.org/learn/computer-networking?), [GCP Basics](https://www.coursera.org/learn/gcp-fundamentals) and their [Crash Course on Python](https://www.coursera.org/learn/python-crash-course?) which have all been really good. They're pretty fluffy, perhaps too fluffy for some, but the content is excellent and well constructed.\n\nThe Crash Course on Python I particularly liked because Google teaches by jumping right into functions and then gets into primitive data types to start building the functions out. Most courses seem to do the opposite so you're trying to get through a bunch of information you aren't familiar with before you start actually making anything. It's like getting a set of tools you've never seen before, then you're told what they do and how to use them without any context, and then you're required to build a bookshelf. The approach that Google uses is more like *\"This is a measuring tape and a saw, we'll use it to cut our first shelf. Here is how you use it, now your turn. Great! Now we can use what you just learned for the sides of the bookshelf and here's how...\"* Also, they have code problems that you have to essentially debug which I think is great to get into logic, design and problem solving. \n\nI currently work in the IT field and have a pretty good command of HTML and CSS, and I troubleshoot JS all day but I don't/can't really build anything.  I can read code, use devtools to figure out what's happening with api calls, etc, but to actually make anything of use I have a long way to go. Just figured I'd throw this out there to people that might be struggling with Youtube content and don't find books particularly helpful. And I am paying for access to Coursera in order to have proof of my progress personal development and and tangible documentation of my self guided study.\n\nIf someone is looking to get some certifications, starting with the above and add [Lynda](https://www.lynda.com/) to your study plans. Lynda's course content is very corporate feeling (think golf shirt/slacks or khaki's), much more so than Coursera and drier I found but great never the less. Should someone eventually want to get something like compTIA certifications or Cisco, they have very good prep courses and are the same content as some Udemy courses (Mike Myers Network+, Sec+),  it's completely free from your library. \n\n**Tip 1:** Set the videos up to 1.25x or 1.5x. The presenters speak really slowly and take long pauses, speeding it up makes it essentially normal speed. Also use the documentation made by the language developers like [Python.org](https://Python.org),  [https://golang.org/](https://golang.org/), [https://rubyonrails.org/](https://rubyonrails.org/), or [MDN](https://developer.mozilla.org/en-US/). You will have to learn to utilize official documentation, might as well use it straight away.\n\n**Tip 2: M**ake a plan using this [https://roadmap.sh/](https://roadmap.sh/). You've heard it before and I'm stating it again; just pick a language that you find enjoyable to work with. Don't focus on money, or what kind of job you can get with it, just find something you find enjoyable enough to start building stuff that you're interested in or find useful. The underlining principals ARE EXACTLY THE SAME for each language, there's just nuances between them and strengths and weaknesses (eg. don't learn swift if you want to make Android apps).\n\n**Tip 3:** Quit trying to make things to impress other people, recruiters, or a game that will make you rich. Getting rich is a byproduct of doing something you enjoy and getting becoming one of the best at it, not a some get rich scheme. Make stuff that is for you and you find useful;\n\n1. Looking for a new house, planning a vacation; write a script that scrapes for deals that fit your criteria and sends you an email or text message with the results.\n2. If you're into security/privacy and an Android user; get your tinfoil hat, learn about LineagOS/GrapeneOS and make simple apps that you can use daily. Or make your own VPN with a free AWS or GCP account to use while at the coffee shop or school or set up a NextCloud server.\n3. For frontend; make some websites that do some wild shit. Bonus if it's something you're into regardless of how nerdy or boring you think it is. You can also just use it to post all the things you make to document your progress (again, can be hosted on a free AWS/GCP account or alternatively Github).\n4. Filing out job applications and detest filing out the forms with info that's on your resume? Make a script that automates that for you and scrapes for jobs that suit your needs instead of getting your inbox filled with spam daily.\n5. Like personal finance/investing? Go to r/algotrading and make a program that trades for you or uses historical financial information to make simulations eg. if you invested in company x, y and z in 1980 with $1000, how much would you have made today. Bonus if you could find a method of trading that would have beat the S&amp;P500 from 2007-2017 for shits and giggles.\n6. My next little project inspired by r/dataisbeautiful, along with the other hundred I things I want to do, is to make a program that has all the current and new cases of COVID-19 and compare that to other viruses like SARS, Zika, Influenza then compare that to reported global homicide rates, accidental deaths, etc for perspective and scale. I don't care if it's been done already, it will be something interesting for me and I can define the criteria I was to explore. Like how many people are killed by vending machines compared to Coronavirus or how many died from severe allergies. \n\n**Tip 4:** Don't just grind away, practicing for hours and days on end without a purpose or enjoyment, but work at it everyday. This isn't a chore someone tasked you, unless your boss tasked you with learning it and even then you don't really have to in the grand scheme of things, but I digress... This should be something you find enjoyment in, curious by and genuinely want to learn. It's hard and extremely mentally draining so if it's a negative in your life you really shouldn't pursue it. Make that bookshelf if that interests you more, or quilting, trimming trees, painting houses, whatever it is there's no shame in any of it. I've seen so many people make an amazing living off of stuff you'd never expect like making custom mouth guards, making premium horse tack, selling seeds from hot peppers. Code doesn't have to be your only chance to make it. \n\nHope it helps a few of you if your feeling lost finding resources that fit your learning style.\n\nSincerely,\n\n\\- A chap that has been struggling to code for over 3 years and is well past his 20's.", "send_replies": false, "spoiler": false, "stickied": false, "subreddit": "learnprogramming", "subreddit_id": "t5_2r7yd", "subreddit_subscribers": 1298698, "subreddit_type": "public", "thumbnail": "self", "title": "I can't recommend Coursera and Lynda enough I've you're trying to learn and improve", "total_awards_received": 0, "url": "https://www.reddit.com/r/learnprogramming/comments/fbkztc/i_cant_recommend_coursera_and_lynda_enough_ive/", "whitelist_status": "all_ads", "wls": 6, "created": 1583018511.0}, {"all_awardings": [], "allow_live_comments": false, "author": "iMakeBaadChoices", "author_flair_css_class": null, "author_flair_richtext": [], "author_flair_text": null, "author_flair_type": "text", "author_fullname": "t2_gjiir", "author_patreon_flair": false, "author_premium": false, "awarders": [], "can_mod_post": false, "contest_mode": false, "created_utc": 1582059104, "domain": "self.learnprogramming", "full_link": "https://www.reddit.com/r/learnprogramming/comments/f5yjfu/practicing_to_be_a_software_engineer_vs_web/", "gildings": {}, "id": "f5yjfu", "is_crosspostable": true, "is_meta": false, "is_original_content": false, "is_reddit_media_domain": false, "is_robot_indexable": true, "is_self": true, "is_video": false, "link_flair_background_color": "", "link_flair_richtext": [], "link_flair_text_color": "dark", "link_flair_type": "text", "locked": false, "media_only": false, "no_follow": true, "num_comments": 2, "num_crossposts": 0, "over_18": false, "parent_whitelist_status": "all_ads", "permalink": "/r/learnprogramming/comments/f5yjfu/practicing_to_be_a_software_engineer_vs_web/", "pinned": false, "post_hint": "self", "preview": {"enabled": false, "images": [{"id": "-B2RYnvKjSBs2Ixt2k7Wo34JLLs72aNpuisbBK3i_vw", "resolutions": [{"height": 56, "url": "https://external-preview.redd.it/p9joXGatHld84Wl_zr4I_UomOa5M90G3GgOQbQMxnak.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=76cf741edf36ba1daabda43903aff6701ee9ff2f", "width": 108}, {"height": 113, "url": "https://external-preview.redd.it/p9joXGatHld84Wl_zr4I_UomOa5M90G3GgOQbQMxnak.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=91dff6c55c62f6c90848c99ef27aee718a22e157", "width": 216}, {"height": 168, "url": "https://external-preview.redd.it/p9joXGatHld84Wl_zr4I_UomOa5M90G3GgOQbQMxnak.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=46bf9a61b5a59245316b60bd8306184799125e30", "width": 320}, {"height": 336, "url": "https://external-preview.redd.it/p9joXGatHld84Wl_zr4I_UomOa5M90G3GgOQbQMxnak.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=be1d70685ca6cf448bef335bbb15f34111fa8ce0", "width": 640}, {"height": 504, "url": "https://external-preview.redd.it/p9joXGatHld84Wl_zr4I_UomOa5M90G3GgOQbQMxnak.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=dd29a251fde1a6782cc5863416ab87221717044b", "width": 960}, {"height": 567, "url": "https://external-preview.redd.it/p9joXGatHld84Wl_zr4I_UomOa5M90G3GgOQbQMxnak.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=9317991d10164b3ea43b69e6e9e60bd1c425ad1a", "width": 1080}], "source": {"height": 630, "url": "https://external-preview.redd.it/p9joXGatHld84Wl_zr4I_UomOa5M90G3GgOQbQMxnak.jpg?auto=webp&amp;s=dbf67b5b767e33b3f57c82ee1740f8b12cc6fe6a", "width": 1200}, "variants": {}}]}, "pwls": 6, "retrieved_on": 1582059110, "score": 1, "selftext": "Hello! I'm currently a student in my final year of college who's graduating soon and is doing a Stats major and have taken some cs courses on the side. Long story short I plan to go into a programming field. I've done a bit of web dev freelancing long ago (for things like making school club websites using the typical MEAN stack) and I find web dev pretty straight forward. Then I learn about software engineering which apparently pays more and is more of the programming stuff using Python/C++/Java and deals with algorithms and etc. I've taken an intro to algorithms class but that was 4 years ago so I remember nothing. I haven't touched programming in a while and have been focused on finishing my stats degree so I forgot most of what I know.\n\nSo, over these next few weeks I have some free time and I was planning to get myself \"job ready\" since I will be applying to jobs very soon.\n\nOn the one hand I can do stuff like The Odin Project to brush up my web dev skills and improve my knowledge (since I know nothing about more advanced JS topics like async/await, the new ES syntax, etc) and on the other hand I can do stuff like [Algorithm part 1 by Sedgewick](https://www.coursera.org/learn/algorithms-part1) and leetcode since that's what will be asked of me in more software engineering roles.\n\nI'm honestly not sure how to prepare best. Like I said, on one side I can focus more on learning the inner workings of NodeJS, learn SQL and Joins and such, or on the other side I can focus more on learning and practicing algorithms and data structures, learning about system design, etc.\n\nAny advice or help will be greatly appreciated!\n\ntldr: I thought to get a programming job I just have to learn to code but there's more to it. On one hand I can learn more web dev topics like data bases, sql, NodeJS + Express, React, etc and on the other hand I can focus more on Algorithms and data structures, system design, etc. I'm not sure what to do to make me \"job ready\"", "send_replies": true, "spoiler": false, "stickied": false, "subreddit": "learnprogramming", "subreddit_id": "t5_2r7yd", "subreddit_subscribers": 1282402, "subreddit_type": "public", "thumbnail": "self", "title": "Practicing to be a software engineer vs web developer", "total_awards_received": 0, "url": "https://www.reddit.com/r/learnprogramming/comments/f5yjfu/practicing_to_be_a_software_engineer_vs_web/", "whitelist_status": "all_ads", "wls": 6, "created": 1582059104.0}, {"all_awardings": [], "allow_live_comments": false, "author": "NovelCoronet6", "author_flair_background_color": "#9e8d49", "author_flair_css_class": null, "author_flair_richtext": [{"e": "text", "t": "Research"}], "author_flair_template_id": "1a60c9f4-4252-11ea-8069-0e308b1d3bfd", "author_flair_text": "Research", "author_flair_text_color": "light", "author_flair_type": "richtext", "author_fullname": "t2_10pj67", "author_patreon_flair": false, "author_premium": false, "awarders": [], "can_mod_post": false, "contest_mode": false, "created_utc": 1581998048, "domain": "self.developersIndia", "full_link": "https://www.reddit.com/r/developersIndia/comments/f5llnu/a_realistic_look_at_data_science/", "gildings": {}, "id": "f5llnu", "is_crosspostable": true, "is_meta": false, "is_original_content": false, "is_reddit_media_domain": false, "is_robot_indexable": true, "is_self": true, "is_video": false, "link_flair_background_color": "", "link_flair_richtext": [], "link_flair_text_color": "dark", "link_flair_type": "text", "locked": false, "media_only": false, "no_follow": true, "num_comments": 36, "num_crossposts": 0, "over_18": false, "permalink": "/r/developersIndia/comments/f5llnu/a_realistic_look_at_data_science/", "pinned": false, "retrieved_on": 1581998050, "score": 1, "selftext": "This entire information is aimed at both the beginners &amp; the people interested in data science either for changing field or curiosity purposes; seasoned professionals feel free to contribute more, I appreciate advice to improve all the information and material collected here.\n\n## What Data Science is and is not\n\nData Science is not exactly a new profession, it has been around for quite some time &amp; we've seen it grow crazily over the recent years all of a sudden, with high demand and crazy salaries offered by big companies, influencers advertising it as the best career option, huge number of MOOCs as well as college courses. The Advent of such high demand is in line with the machine learning/deep learning craze and companies wanting to harvest technologies for more profit.\n\nSo, we are advertised that with some machine learning skills &amp; a little bit of programming, we can be earning a ton and living the dream, seems too good to be true, isn't it? Just take some large dataset, run it through a little bit of Python and Bam! profit. Let me stop you right there and crush these kinds of dreams, because **this is a huge pile of bullshit**.\n\nFirst, the kind of machine learning we come across at various MOOCs claiming to teach you data science (or even kaggle for that matter), are absolute opposite of the actual kind of work you'll be doing. While you glance at the profession with rose tinted glasses, stained by the attractive packaging and advertisement of the role, don't forget the second word in the name itself: **SCIENTIST**\n\nSecond, the company is investing huge resources because they're betting on an even better return, and you've to bear the burden of it. They're investing to extract value from things they aren't able to see, and this isn't just the entirety of it, you've got a lot more stuff.\n\nHere's a bit of reality: Machine Learning is less than 10% of the part of the job. Don't think you'll just be running new models every week and just sipping on your coffee while you watch it train and then just do the magical sklearn.metrics.accuracy_score(y_train, y_test) , get 0.97665 and be paid lakhs for it. \n\nThe advertising is all kinds of bullshit, which has started to fill the field up with people who don't understand what the job is, let alone provide any kind of ROI, in the end just wasting resources of the company. If you think you can learn about it on the job, then drop the idea immediately. If you think you will just have some fancy tech and write small bits of easy python code, then please, by all means, this field isn't for you. And for the last time, *do not listen to the advertisement*.\n\n## The Process &amp; Work\n\nSo, let's get into the jucier bits, after all, what exactly is the work I talked about for so long?\n\nWith the huge investment the companies put into Data Science, think of them as a valueable client who believe you can give them valueable returns in the end. How would you like paying an Android developer over 2 lakhs just to get a template with few edited strings? It's the very same thing with this profession; imagine a company putting up a handsome 18lpa package, you get through the selection, and at the end **Surprise!** you can't make sense of anything despite clear explanation or documentation, you wonder where to put up a Scikit-learn model, or hell, how do you even make sense of the data you've to pass through it, you don't have a clearly formatted CSV or sequentially laid out images pre-curated for you.\n\nThe largest part of your work, as well as the only thing you will &amp; are supposed to learn on work, is understanding the data and how it relates to your domain. Your 2 major questions associated with it are, how do we make use of this to positively attract the customers? and why are certain parts more important than the others in making a decision? Sounds like computerised marketing &amp; management? Because yes, a lot of it is.\n\nA large chunk of your time will be spent automating the stuff to ensure your work goes smoothly or even for other people. Your work is providing solutions that can improve the ROI throughout. Expect to be building scrapers, pipelines, databases, servers, computing clusters and more such stuff for the majority of your time, just to ensure that when you do your actual work, it goes way faster than it would've traditionally. If your entire skillset consists of Python &amp; ML, trust me, you'll struggle a lot &amp; it's because of exactly this, many recruiters put of absurd filtering mechanisms to weed out the said candidates, which sometimes equally backfire on geniuine ones.\n\n## Skills to Learn\n\nGet this into your head Data Science is not machine learning and vice versa is also true.\n\nYour first step into Data science isn't python programming, it's data. Learn how data moves or is stored, how do you fetch data, how it is structured.  Start with the most popular form of data storage, as well as the easiest one to use: SQL.\n\nHere's a few good sources:\n* [W3schools](https://www.w3schools.com/sql/)\n* [Official Postgresql doc](https://www.postgresql.org/docs/)\n\nOnce you're done with these, I recommend learning a programming language(obviously python is the preferred choice, followed by R), and then do the operations through scripts. There's a lot of good tutorials out there, just remember, you'll learn more by doing on your own than watching a video and memorizing syntax. \n\nMoving onto the more interesting(or boring if that's not your thing), learn to manipulate the data and how things work together in it. Pandas has an amazing documentation with examples and pretty comprehensive set of functions *to get you started*(yup, this isn't going to be your run off the mill make dataframe, make prediction). This is what will help you to make your data manipulation job easier (no, there is not a library to clean up your data, because everyone has a different requirement and certain things can be pretty sensitive despite appearing opposite). You'll build on this &amp; numpy, to optimize your operations. This will be a pretty headbanging part with having to keep track of the flow, types, deltas and many more such stuff relevant to your requirement, but remember this will be one time, and when your data updated, you've got this super easy command in your terminal looking like \"python3 cleaner.py\" and you can just forget about having to go through the headache again. So make sure to understand all this too. This is your software engineering part. Oh, don't forget the management's archiac but still efficient tool of choice, the software of the gods: MS freaking Excel(yes, unfortunately, you'll also be doing your work in here as well)\n\nYou'll also have to create pipelines &amp; scrapers to ensure your flow of data is efficient and just how you need it. You're going to have to learn about web, crawlers, bots etc. This is the dirty part which no one actually tells you about. Python as your sole programming language won't suffice here. Yes, you've got selenium, but honestly how much functionality does it really provide? For complete efficiency as well as ease, you're going to have to understand web technologies, stuff like browsers, how crawlers work, backend tech like Flask, Django or Node.\n\nHere's a few good resources:\n* [Corey Schafer](https://m.youtube.com/playlist?list=PL-osiE80TeTt2d9bfVyTiXJA-UTHn6WwU)\n* [Sentdex](https://m.youtube.com/user/sentdex/)\n* [Freecodecamp](https://www.freecodecamp.org/news/search/?query=node)\n\nBut but, *MaChInE lEaRnInG*\n\nHere's the thing, yes, ML is pretty important, but also, a lot of times it won't be part of your project. Your main work is solving the problems to increase efficiency, wherein you might even come across some colleague complaining about something &amp; you automate it for them. Your package includes this work as well, in the end you're boosting the productivity in workflow, providing the return of investment by the employer. Learn to design stuff &amp; think of solutions. Ask yourself, how can I improve what I see in front of me, or what I hear around me.\n\nHere's a little bit of salt, some of your DS projects will ignore programming standards in favor of quick delivery. You might just end up watching ` from datetime import *` (I can already hear angry hordes of software engineers with their pitchforks on my door, send help). \n\nu/VeTech16 has written a great [post](https://www.reddit.com/r/developersIndia/comments/f22s4v/guide_to_a_strong_foundation_in_machine_learning/) about Machine Learning. It includes a large part of the mathematics required for both ML as well as data science.\n\nMost important among all: \n\n### LEARN &amp; UNDERSTAND STATISTICS AND PROBABILITY\n\nSeriously, any amount of emphasis on this statement is not enough. Between all the programming stuff, before you go about just creating code, the most important thing is to measure the impact and if it's worth the resources utilized. You form a hypothesis based on data you gather, it can be any form, even overhearing junior management complaining about having to go through filling in the pesky Excel columns. Your first step is forming a hypothesis. Let me take the very same example and create a project right here:\n\n* Overhear management talking about low turnover for a type of customer with certain parameters\n* Hypothesis: Customer needs a push in form of incentives\n* Weighing in with statistics: How significant is the customer type to the business? Why should I want to attract them? Does my hypothesis fit the problem?\n* I design an algorithm to detect these type of customers and provide them with said incentive.\n* 2 possible outcomes: It works, customer turnover improves. Does not work, hypotheses is flawed.\n\nYou don't want to be having the second result after writing the algorithm, since it can even lead to a good amount of loss depending on the traffic. Which is why stats is necessary, so that you can answer the three questions asked and alter your hypothesis accordingly until you see a net positive outcome, after which you create an algorithm for the same.\n\nYes, you'll definitely create Machine Learning models and predict stuff. There's way too many courses on this subject and some of my personal favorite have been: [Andrew NG at Coursera](https://www.coursera.org/learn/machine-learning), [Fast.ai](fast.ai) and Sentdex at YouTube(given above). These are good enough to get you started, but in actual scenario you'll need a deeper knowledge since you'll have to explain why you did what you did, otherwise it's almost like your MOOC with trying out random stuff to see which fits best. You won't get to do random stuff at work, you decide &amp; choose a model or 2, or create a pipeline with multiple of them. Understand the maths behind algorithms and the when &amp; why to choose them. Sometimes your result can be obtained even without having to create any ML model at all, so keep this in mind as well. If you're so much wanting to work on the cool looking DL stuff with cutting edge tech, just enroll in academia or R&amp;D.\n\nI did talk about distributed computing. I'm not too familiar with it myself, but I would suggest learning atleast something about it, you won't encounter it much in startups, but big corporates with Terabytes of data would be using them.\n\nCloud computing like AWS &amp; Azure is equally important skill with a lot of takers. Learn how to utilize the various infrastructures offered and try to couple them together to your advantage. \n\nLastly, if you want to get into Data Science geniuinely, go for it, it's fun despite the heavy responsibility if you understand the stuff, just understand that it takes both patience and an analytical mind. Not everyone has the talent or complete interest for the real work involved, but there are so much other options as well, so really, just work hard and if things don't work out, you still got to learn a lot, which can be applied elsewhere as well.", "send_replies": true, "spoiler": false, "stickied": false, "subreddit": "developersIndia", "subreddit_id": "t5_2dfnk0", "subreddit_subscribers": 2354, "subreddit_type": "public", "thumbnail": "self", "title": "A Realistic look at Data Science", "total_awards_received": 0, "url": "https://www.reddit.com/r/developersIndia/comments/f5llnu/a_realistic_look_at_data_science/", "created": 1581998048.0}]